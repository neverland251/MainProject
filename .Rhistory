b[i+1] <- temp
}
mean_iter_x <- c(mean_iter_x,(6000-3000)^(-1)*sum(b))
mean_iter_y <- c(mean_iter_y,(6000-3000)^(-1)*sum(d))
print(c("iter",j,"complete"))
}
mean_iter_x
mean(x)
mean(mean_iter_x)
d
b
sum(b)
a <- 10
b <- c(1)
d <- c()
for(i in seq(1,6000)){
temp <- rgamma(1,shape=a+b[i],scale=1/2)
d[i] <- temp
temp <- rpois(1,temp)
b[i+1] <- temp
}
mean(d)
mean(b)
mean_iter_y <- c(mean_iter_y,(6000-3000)^(-1)*sum(d[3001:6000]))
mean_iter_x <- c(mean_iter_x,(6000-3000)^(-1)*sum(b[3001:6000]))
mean_iter_y <- c(mean_iter_y,(6000-3000)^(-1)*sum(d[3001:6000]))
mean_iter_x
(6000-3000)^(-1)*sum(b[3001:6000])
(6000-3000)^(-1)*sum(d[3001:6000])
### Y에 대한 분산
var(d[3001:6000])
### (2 - 2)x에 대한 분산
var(b[3001:6000])
## 2) 3000개부터 6000개 사이의 샘플들 X,Y에 대한 평균과 분산을 추출하시오
### (1 - 1)Y에 대한 평균
mean_y <- (6000-3000)^(-1)*sum(b[3001:6000])
## 2) 3000개부터 6000개 사이의 샘플들 X,Y에 대한 평균과 분산을 추출하시오
### (1 - 1)Y에 대한 평균
mean_y <- (6000-3000)^(-1)*sum(b[3001:6000])
### (1 - 2)Y에 대한 분산
var_y <- var(d[3001:6000])
### (2 - 1)X에 대한 평균
mean_x <- (6000-3000)^(-1)*sum(d[3001:6000])
### (2 - 2)x에 대한 분산
var_y <- var(b[3001:6000])
c(mean_x,var_x,mean_y,var_y)
### (2 - 2)x에 대한 분산
var_y <- var(b[3001:6000])
c(mean_x,var_x,mean_y,var_y)
## 2) 3000개부터 6000개 사이의 샘플들 X,Y에 대한 평균과 분산을 추출하시오
### (1 - 1)Y에 대한 평균
mean_y <- (6000-3000)^(-1)*sum(b[3001:6000])
### (1 - 2)Y에 대한 분산
var_y <- var(d[3001:6000])
### (2 - 1)X에 대한 평균
mean_x <- (6000-3000)^(-1)*sum(d[3001:6000])
### (2 - 2)x에 대한 분산
var_x <- var(b[3001:6000])
c(mean_x,var_x,mean_y,var_y)
mean_y * qnorm(0.025) * (var_y^(1/2)/length(b[3001:6000])^(1/2))
mean_y
qnorm(0.025)
var_y^(1/2)
## 3) 2)에서 추출한 평균에 대한 95% 신뢰구간을 정하시오
### (1) 이들 평균들은 결론적으로 N(c,s)로 분포수렴한다. 이를 이용하여 X와 Y 각각에 대한 신뢰구간을 정하면
#### - Y에 대한 신뢰구간
lower <- mean_y - qnorm(0.025) * (var_y^(1/2)/length(b[3001:6000])^(1/2))
mean_y - qnorm(0.025) * (var_y^(1/2)/length(b[3001:6000])^(1/2))
## 3) 2)에서 추출한 평균에 대한 95% 신뢰구간을 정하시오
### (1) 이들 평균들은 결론적으로 N(c,s)로 분포수렴한다. 이를 이용하여 X와 Y 각각에 대한 신뢰구간을 정하면
#### - Y에 대한 신뢰구간
upper <- mean_y - qnorm(0.025) * (var_y^(1/2)/length(b[3001:6000])^(1/2))
lower <- mean_y + qnorm(0.025) * (var_y^(1/2)/length(b[3001:6000])^(1/2))
c(lower,upper)
upper <- mean_x - qnorm(0.025) * (var_x^(1/2)/length(d[3001:6000])^(1/2))
lower <- mean_x + qnorm(0.025) * (var_x^(1/2)/length(d[3001:6000])^(1/2))
c(lower,upper)
c(lower,upper)
/rnorm
?rnom
?rnorm
a <- 10
b <- 10
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
}
a <- 10
b <- 10
n <- 300
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
}
d <- c()
e <- c()
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
}
t_stat <- c()
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
}
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
print("iter",j,"complete")
}
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
print(c("iter",j,"complete"))
}
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,300)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
print(c("iter",j,"complete"))
}
t_stat
mean(t_stat)
i
d
e
temp
length(t_stat)
x <- seq(2,100,by = 2)
x
x <- seq(2,100,by = 2)
d <- c()
for(i in seq(1,100)){
d <- c(d,sum(1/(x[1:i])))
}
d
4^(1/4)
1000^(1/1000)
100000^(1/100000)
10000^(1/10000)
100^(1/100)
10^(1/10)
50^(1/50)
45^(1/45)
35^(1/35)
40^(1/40)
42^(1/42)
47^(1/47)
38^(1/38)
39^(1/39)
for(i in seq(0,1000){
for(i in seq(0,1000)){
if(0.5 - (i^2 + n)^(1/2) - n < 1/10){
print(i)
halt
}
}
for(i in seq(0,1000)){
if(abs(0.5 - (i^2 + n)^(1/2) - n) < 1/10){
print(i)
halt
}
}
i
if(abs((i^2 + n)^(1/2) - n - 0.5) < 1/10){
print(i)
halt
}
for(i in seq(0,1000)){
if(abs((i^2 + n)^(1/2) - n - 0.5) < 1/10){
print(i)
halt
}
}
(1+(1/4))^4
exp(1)
for(i in seq(0,1000)){
if(abs((1+(1/i))^(n) - exp(1)) < 1/10){
print(i)
halt
}
}
abs((1+(1/i))^(n) - exp(1)
)
abs((1+(1/i))^(n) - exp(1))
abs((1+(1/i))^(i) - exp(1))
for(i in seq(0,1000)){
if(abs((1+(1/i))^(i) - exp(1)) < 1/10){
print(i)
halt
}
}
((1+x)^(1/2) - 1)/x
x <- seq(0,3,by=0.01)
((1+x)^(1/2) - 1)/x
plot(((1+x)^(1/2) - 1)/x)
arcsin(1/(100*x))
sin^(-1)
sin^(-1)(1/(100*x))
x*sin(x)
x*sin(x) < 1/100
x[x*sin(x) < 1/100]
sin(x)/x
sin(x)/x < 0.01
x <- seq(0,1000,by=1)
sin(x)/x < 0.01
x[sin(x)/x < 0.01]
x[2*x/(1+x) < 0.01]
x[2*x/(1+x) - 2 < 0.01]
2*x/(1+x)
plot(2*x/(1+x))
x[2*x/(1+x) - 2 < 0.01]
x[(2*x/(1+x)) - 2 < 0.01]
(2*x/(1+x)) - 2 < 0.01
x
0-2
x[1]
(2*0/(1+0)) - 2 < 0.01
(2*0/(1+0))
x[abs((2*x/(1+x)) - 2) < 0.01]
plot((1+(1/x))^(x))
(1+(1/x))^(x)
x <- seq(9000,10000)
(1+(1/x))^(x)
x <- seq(0,1,by=0.01)
x
2*x - 5*x^2 + 7*x^3
plot(2*x - 5*x^2 + 7*x^3)
x <- seq(0,5,by=0.01)
plot(2*x - 5*x^2 + 7*x^3)
x <- seq(0,1000)
plot(2*x - 5*x^2 + 7*x^3)
plot((2*x - 5*x^2 + 7*x^3)/x^3)
x <- seq(-1000,0)
plot((2*x - 5*x^2 + 7*x^3)/x^3)
x
x <- seq(0,1000)
plot((2*x - 5*x^2 + 7*x^3)/x)
x <- seq(0,100000)
plot((2*x - 5*x^2 + 7*x^3)/x)
plot((6*x^3+1000*x)/x)
x <- seq(0,1000)
x <- seq(0,1000)
plot((6*x^3+1000*x)/x)
plot((6*x^3+1000*x)/x^4)
plot((6*x^3+1000*x)/x^3)
plot((6*x^3+1000*x)/x^2)
plot((6*x^3+1000*x)/x^3)
x
plot((6*x^3+1000*x)/(x^3 + 1))
plot((3*x^2+2*x+1)/(3+2*x+x^2)
)
plot(x*sin(1/x))
plot((1-0.9^x)/(1-0.9))
plot((1-0.5^x)/(1-0.5))
plot((1-2^x)/(1-2))
plot((1-5^x)/(1-5))
plot((1-1^x)/(1-1))
plot((1-0.99^x)/(1-0.99))
plot((1-0.999^x)/(1-0.999))
plot((1-0.99999^x)/(1-0.99999))
x <- seq(0,10000)
plot((1-0.99999^x)/(1-0.99999))
x <- seq(0,100000)
plot((1-0.99999^x)/(1-0.99999))
plot((1-0.9^x)/(1-0.9))
x <- seq(0,1000)
plot((1-0.9^x)/(1-0.9))
1/0/9
1/0.9
a <- 10
b <- 10
n <- 300
d <- c()
e <- c()
t_stat <- c()
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,300)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
print(c("iter",j,"complete"))
}
t_stat
a <- 20
b <- 10
n <- 300
d <- c()
e <- c()
t_stat <- c()
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,300)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
print(c("iter",j,"complete"))
}
t_stat
e
d
(0.09/3*x)
(0.09/(3*x))
(0.09/(3*x)) < 1/10^7
(0.09/(30*x)) < 1/10^7
x
(0.09/(30*seq(1000,2000))) < (1/10^7)
(0.09/(30*seq(2000,3000))) < (1/10^7)
(0.09/(30*seq(6000,7000))) < (1/10^7)
(0.09/(30*seq(10000,11000))) < (1/10^7)
(0.09/(30*seq(100000,110000))) < (1/10^7)
(0.09/(30*seq(100000,110000))) < (1/(10^7))
(0.09/(30*seq(1,10))) < (1/(10^7))
(0.09/(30*seq(10,20))) < (1/(10^7))
0.09/(30*8)
0.09/(30*2)
0.09/(30*1)
0.09/(30*2)
(0.09/(30^seq(1,10))) < (1/(10^7))
(0.09/(30^5) < (1/(10^7))
)
(0.09/(30^5)
0.09/(30^5)
0.09/(30^2)
0.09/(30^1)
0.09/(30^0)
0.09/(30^3)
0.09/(30^4)
0.09/(30^2)
0.18/(30^2)
0.18/(30^3)
0.18/(30^4)
0.18/(30^4) < 1/(10^7)
0.18/(30^5) < 1/(10^7)
0.18/(30^6) < 1/(10^7)
0.18/(30^x) < 1/(10^7)
0.18/(30^1)
0.4 + 0.18/(30^1)
0.4 + 0.18/(30^0)
0.4 + 0.18/(30^1)
0.18/(30^1)
0.18/(30^0)
0.09/(30^0)
0.4 + 0.09/(30^0)
0.4 + 0.09/(30^1)
0.4 + sum(0.09/(30^x[1:2]))
0.4 + sum(0.09/(30^x[1:3]))
0.4 + sum(0.09/(30^x[1:4]))
0.4 + sum(0.09/(30^x[1:100]))
0.4 + sum(0.09/(30^x[1:10000]))
0.4 + sum(0.09/(30^x[1:1000]))
0.4 + sum(0.09/(30^rep(0,10000)))
0.4 + sum(0.09/(30^c(rep(0,10000)))
)
0.4 + sum(0.09/(30^seq(0,10000)))
0.4 + sum(0.18/(30^seq(0,10000)))
0.4 + sum(0.1/(30^seq(0,10000)))
0.4 + sum(0.092/(30^seq(0,10000)))
0.4 + sum(0.093/(30^seq(0,10000)))
0.4 + sum(0.091/(30^seq(0,10000)))
0.4 + sum(0.0901/(30^seq(0,10000)))
0.4 + sum(0.0909/(30^seq(0,10000)))
0.4 + sum(0.09001/(30^seq(0,10000)))
0.4 + sum(0.09009/(30^seq(0,10000)))
0.4 + sum(0.0901/(30^seq(0,10000)))
0.4 + sum(0.0909/(30^seq(0,10000)))
0.4 + sum(0.0907/(30^seq(0,10000)))
0.4 + sum(0.0908/(30^seq(0,10000)))
0.4 + sum(0.09091/(30^seq(0,10000)))
0.4 + sum(0.09090/(30^seq(0,10000)))
0.4 + sum(0.09089/(30^seq(0,10000)))
0.4 + sum(0.09085/(30^seq(0,10000)))
0.4 + sum(0.09086/(30^seq(0,10000)))
0.4 + sum(0.09087/(30^seq(0,10000)))
sum(factorial(9)/(5^x))
x
sum(9/(5^x))
x
sum(10^10/(5^x))
sum(factorial(10)/(5^x))
?gamma
?rgamma
for(i in seq(0,3000)){
temp_k <- rgamma(1,shape = alpha+1/2,1/((a[i]^2/2)+(1/beta)))
k <- c(k,temp_k)
temp_a <- rnorm(1,(k[i]^2/((b^2/n)+k[i]^2))*x,(k[i]^2*b^2)/(b^2+n*k[i]^2))
a <- c(a,temp_a)
results <- c(results,rnorm(1,a[i+1],b^2/n))
}
a <- c(0)
k <- c()
results <- c()
alpha <- 2
beta <- 10
for(i in seq(0,3000)){
temp_k <- rgamma(1,shape = alpha+1/2,1/((a[i]^2/2)+(1/beta)))
k <- c(k,temp_k)
temp_a <- rnorm(1,(k[i]^2/((b^2/n)+k[i]^2))*x,(k[i]^2*b^2)/(b^2+n*k[i]^2))
a <- c(a,temp_a)
results <- c(results,rnorm(1,a[i+1],b^2/n))
}
warnings()
k
alpha <- 20
beta <- 100
for(i in seq(0,3000)){
temp_k <- rgamma(1,shape = alpha+1/2,1/((a[i]^2/2)+(1/beta)))
k <- c(k,temp_k)
temp_a <- rnorm(1,(k[i]^2/((b^2/n)+k[i]^2))*x,(k[i]^2*b^2)/(b^2+n*k[i]^2))
a <- c(a,temp_a)
results <- c(results,rnorm(1,a[i+1],b^2/n))
}
warnings()
k
temp_k
k[1]
a
a[1]
for(i in seq(1,3000)){
temp_k <- rgamma(1,shape = alpha+(1/2),1/((a[i]^2/2)+(1/beta)))
k <- c(k,temp_k)
temp_a <- rnorm(1,(k[i]^2/((b^2/n)+k[i]^2))*x,(k[i]^2*b^2)/(b^2+n*k[i]^2))
a <- c(a,temp_a)
results <- c(results,rnorm(1,a[i+1],b^2/n))
}
warnings()
k
a
a[1]
seq(1,3000)
seq(1,100)
a[1]
a <- c(0)
k <- c()
results <- c()
alpha <- 1
beta <- 1
for(i in seq(1,3000)){
temp_k <- rgamma(1,shape = alpha+(1/2),1/((a[i]^2/2)+(1/beta)))
k <- c(k,temp_k)
temp_a <- rnorm(1,(k[i]^2/((b^2/n)+k[i]^2))*x,(k[i]^2*b^2)/(b^2+n*k[i]^2))
a <- c(a,temp_a)
results <- c(results,rnorm(1,a[i+1],b^2/n))
}
results
a
x
rm(x)
for(i in seq(1,3000)){
temp_k <- rgamma(1,shape = alpha+(1/2),1/((a[i]^2/2)+(1/beta)))
k <- c(k,temp_k)
temp_a <- rnorm(1,(k[i]^2/((b^2/n)+k[i]^2))*x,(k[i]^2*b^2)/(b^2+n*k[i]^2))
a <- c(a,temp_a)
results <- c(results,rnorm(1,a[i+1],b^2/n))
}
x <- 0
a <- c(0)
k <- c()
results <- c()
alpha <- 1
beta <- 1
for(i in seq(1,3000)){
temp_k <- rgamma(1,shape = alpha+(1/2),1/((a[i]^2/2)+(1/beta)))
k <- c(k,temp_k)
temp_a <- rnorm(1,(k[i]^2/((b^2/n)+k[i]^2))*x,(k[i]^2*b^2)/(b^2+n*k[i]^2))
a <- c(a,temp_a)
results <- c(results,rnorm(1,a[i+1],b^2/n))
}
results
a
mean(a)
mean(results)
mean(results[1000:3000])
