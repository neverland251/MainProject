sum(score_2(alpha_score(y,x)))
x <- c(2.3,0.3,5.2,3.1,1.1,0.9,2.0,0.7,1.4,0.3)
x
y <- c(0.8,2.8,4.0,2.4,1.2,0.0,6.2,1.5,28.8,0.7)
n_1 <- length(x)
n_2 <- length(y)
number_for_a <- c(seq(1,n_1+n_2))
var_w1 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_1(alpha_score(number_for_a,0))[2]^2))
var_w2 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_2(alpha_score(number_for_a,0))[2]^2))
var_w3 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_3(alpha_score(number_for_a,0))[2]^2))
var_w4 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_4(alpha_score(number_for_a,0))[2]^2))
var_w1
var_w2
sum(score_1(alpha_score(y,x))[2]) / sqrt(var_w1)
sum(score_2(alpha_score(y,x))[2]) / sqrt(var_w2)
y <- round(runif(15,0,100))
x <- round(runif(15,0,100))
y <- round(runif(15,0,100))
ggplot(score_2(alpha_score(y,x)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
n_1 <- length(x)
n_2 <- length(y)
number_for_a <- c(seq(1,n_1+n_2))
var_w1 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_1(alpha_score(number_for_a,0))[2]^2))
var_w2 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_2(alpha_score(number_for_a,0))[2]^2))
var_w3 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_3(alpha_score(number_for_a,0))[2]^2))
var_w4 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_4(alpha_score(number_for_a,0))[2]^2))
var_w1
var_w2
var_w3
var_w4
score_3
number_for_a
alpha_score
length(0)
length(NULL)
var_w1 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_1(alpha_score(number_for_a,NULL))[2]^2))
var_w2 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_2(alpha_score(number_for_a,NULL))[2]^2))
var_w3 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_3(alpha_score(number_for_a,NULL))[2]^2))
var_w4 <- ((n_1 * n_2)/(n_1 + n_2 - 1)) * ((1/(n_1 + n_2)) * sum(score_4(alpha_score(number_for_a,NULL))[2]^2))
var_w3
var_w1
var_w2
length(x)
rank(y)
sum(score_2(alpha_score(y,x))[2]) / sqrt(var_w2)
sum(score_1(alpha_score(y,x))[2]) / sqrt(var_w2)
sum(score_2(alpha_score(y,x))[2]) / sqrt(var_w2)
pnorm(sum(score_2(alpha_score(y,x))[2]) / sqrt(var_w2),0,var_w2)
pnorm(sum(score_1(alpha_score(y,x))[2]) / sqrt(var_w1),0,var_w1)
pnorm(sum(score_1(alpha_score(y,x))[2]) / sqrt(var_w1),0,var_w1)
pnorm(sum(score_2(alpha_score(y,x))[2]) / sqrt(var_w2),0,var_w2)
pnorm(sum(score_3(alpha_score(y,x))[2]) / sqrt(var_w3),0,var_w3)
pnorm(sum(score_4(alpha_score(y,x))[2]) / sqrt(var_w4),0,var_w4)
#
ggplot(score_2(seq(0,1)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
#
ggplot(score_1(seq(0,1)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
#
ggplot(score_2(seq(0,1)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
#
ggplot(score_3(seq(0,1)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
score_2(seq(0,1))
score_2(seq(0,1,by=0.01))
#
ggplot(score_3(seq(0,1,by=0.01)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
#
ggplot(score_2(seq(0,1,by=0.01)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
#
ggplot(score_4(seq(0,1,by=0.01)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
ggplot(score_1(seq(0,1,by=0.01)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
ggplot(score_2(seq(0,1,by=0.01)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
ggplot(score_3(seq(0,1,by=0.01)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
ggplot(score_4(seq(0,1,by=0.01)),aes("x" = x, "y" = y)) + geom_line() + geom_hline(yintercept = 0, color = "red")
n_1 <- length(x)
n_2 <- length(y)
number_for_a <- c(seq(1,n_1+n_2))
mean(x)
x
x - mean(x)
sum(x - mean(x))
sum(mean(x) - x)
ggplot(h) + geom_line(aes("x" = abnom,"y"=sensi)) + geom_line(aes("x" = abnom,"y" = sensi.x)) + geom_line(aes("x" = abnom,"y" = sensi.y))
library("ggplot2")
ggplot(h) + geom_line(aes("x" = abnom,"y"=sensi)) + geom_line(aes("x" = abnom,"y" = sensi.x)) + geom_line(aes("x" = abnom,"y" = sensi.y))
factorial(20)/(factorial(9)*factorial(20-9))
factorial(20)/(factorial(9)*factorial(20-9)) * (0.5)^(20) * (0.5)^(20-9)
factorial(20)/(factorial(9)*factorial(20-9)) * (0.3)^(20) * (0.7)^(20-9)
a <- c(1,2,3,4)
b <- c(0.5,1,1.5,2)
a
b
a^2/((a^2+(x-b)^2) * (a^2 + (y-b)^2)
)
x <- rep(1,4)
y <- rep(4,4)
a^2/((a^2+(x-b)^2) * (a^2 + (y-b)^2))
x <- 1
y <- 4
for(i in a){
for(i in a){
for(i in a){
for(j in b){
print(c(a^2/((a^2+(x-b)^2) * (a^2 + (y-b)^2))),i,j)
}
}
for(i in a){
for(j in b){
print(c(a^2/((a^2+(x-b)^2) * (a^2 + (y-b)^2)),i,j))
}
}
x <- 1
y <- 4
for(i in a){
for(j in b){
print(c(a^2/((a^2+(x-b)^2) * (a^2 + (y-b)^2)),i,j))
}
}
i
j
print(c(i^2/((i^2+(x-j)^2) * (i^2 + (y-j)^2)),i,j))
for(i in a){
for(j in b){
print(c(i^2/((i^2+(x-j)^2) * (i^2 + (y-j)^2)),i,j))
}
}
for(i in a){
for(j in b){
result <- data.frame(c(i^2/((i^2+(x-j)^2) * (i^2 + (y-j)^2)),i,j))
}
}
result
for(i in a){
for(j in b){
result <- data.frame("a" = i^2/((i^2+(x-j)^2) * (i^2 + (y-j)^2)), "b" = i, "c" = j))
}
}
for(i in a){
for(j in b){
result <- data.frame("a" = i^2/((i^2+(x-j)^2) * (i^2 + (y-j)^2)), "b" = i, "c" = j)
}
}
result
result <- data.frame()
for(i in a){
for(i in a){
result <- data.frame()
for(i in a){
for(j in b){
result <- rbind(result,data.frame("a" = i^2/((i^2+(x-j)^2) * (i^2 + (y-j)^2)), "b" = i, "c" = j))
}
}
result
40/((1/2) + 10*(18.2))
dot(a)
a
crossprod(a,a)
crosprod(a)
crossprod(a,a)
prod(a)
?prod
40 * (1/(1/2+10*18.2))
runif(1,0,1)
for(i in runif(10000,0,1)){
a <- (1/2)*log(1-i)
b <- a - log(1-i)
d <- c(c,b)
}
d
i
d
b
c
rm(c)
c
for(i in runif(10000,0,1)){
a <- (1/2)*log(1-i)
b <- a - log(1-i)
d <- c(d,b)
}
d
d <- c()
for(i in runif(10000,0,1)){
a <- (1/2)*log(1-i)
b <- a - log(1-i)
d <- c(d,b)
}
d
mean(d)
i
ia
a
d <- c()
for(i in runif(10000,0,1)){
a <- (1/2)*log(1-i)
b <- a - log(1-i)
d <- c(d,b)
}
length(d)
for(i in runif(10000,0,1)){
a <- (1/2)*log(1-i)
b <- a - log(1-i)
d <- c(d,b)
}
d
mean(d)
d <- c()
for(i in runif(10000,0,1)){
a <- (1/2)*log(1-i)
b <- a - log(1-i)
d <- c(d,b)
}
mean(d)
a
for(i in runif(10000,0,1)){
a <- -(1/2)*log(1-i)
b <- a - log(1-i)
d <- c(d,b)
}
d <- c()
for(i in runif(10000,0,1)){
a <- -(1/2)*log(1-i)
b <- a - log(1-i)
d <- c(d,b)
}
mean(d)
sd(d)
mean(d)
sd(d)
var(d)
var(d)^(1/2)
d - mean(d)
sum((d - mean(d))^2)
sum((d - mean(d))^2)/(length(d) - 1)
var(d)
sd(d)
d <- c()
for(i in runif(10000,0,1)){
a <- -(1/2)*log(1-i)
b <- a - log(1-i)
d <- c(d,b)
}
sd(d)
mean(d)
var(d)^(1/2)
sd(d)
for(i in runif(100000,0,1)){
a <- -(1/2)*log(1-i)
b <- a - log(1-i)
d <- c(d,b)
}
qnorm(0.025)
mean(d) - qnorm(0.025)*(sd(d)/length(d)^(1/2))
lower <- mean(d) - qnorm(0.025)*(sd(d)/length(d)^(1/2))
upper <- mean(d) + qnorm(0.025)*(sd(d)/length(d)^(1/2))
c(lower,upper)
upper <- mean(d) - qnorm(0.025)*(sd(d)/length(d)^(1/2))
lower <- mean(d) + qnorm(0.025)*(sd(d)/length(d)^(1/2))
c(lower,upper)
c(lower,upper)
upper <- mean(d) - qnorm(0.025)*(sd(d)/length(d)^(1/2))
lower <- mean(d) + qnorm(0.025)*(sd(d)/length(d)^(1/2))
c(lower,upper)
?rgamma
?poisson
a <- 10
b <- c(1)
b
b[1]
for(i in rep(1,6000){
for(i in rep(1,6000){
for(i in seq(1,6000){
for(i in seq(1,6000)){
b <- c(b,rgamma(1,shape=a+b[i],scale=1/2))
temp <- rpois(1,b[i+1])
b[i] <- temp
d[i] <- temp
}
b
mean(b)
mean(d)
rpois(1,b[1])
temp
d
b
sd(b)
var(b)
mean_iter_x <- c()
mean_iter_y <- c()
for(j in seq(1,3000)){
for(i in seq(1,6000)){
b <- c(b,rgamma(1,shape=a+b[i],scale=1/2))
temp <- rpois(1,b[i+1])
b[i] <- temp
d[i] <- temp
}
mean_iter_x <- c(mean_iter,mean(b))
mean_iter_y <- c(mean_iter_y,mean(d))
}
mean_iter_x <- c()
mean_iter_x <- c()
mean_iter_y <- c()
for(j in seq(1,3000)){
for(i in seq(1,6000)){
b <- c(b,rgamma(1,shape=a+b[i],scale=1/2))
temp <- rpois(1,b[i+1])
b[i] <- temp
d[i] <- temp
}
mean_iter_x <- c(mean_iter_x,mean(b))
mean_iter_y <- c(mean_iter_y,mean(d))
}
for(j in seq(1,3000)){
for(i in seq(1,6000)){
b <- c(b,rgamma(1,shape=a+b[i],scale=1/2))
temp <- rpois(1,b[i+1])
b[i] <- temp
d[i] <- temp
}
mean_iter_x <- c(mean_iter_x,mean(b))
mean_iter_y <- c(mean_iter_y,mean(d))
}
a <- 10
b <- c(1)
d <- c()
b
for(j in seq(1,3000)){
for(i in seq(1,6000)){
temp <- c(b,rgamma(1,shape=a+b[i],scale=1/2))
d[i] <- temp
temp <- rpois(1,temp)
b[i+1] <- temp
}
mean_iter_x <- c(mean_iter_x,(6000-3000)^(-1)*sum(b))
mean_iter_y <- c(mean_iter_y,(6000-3000)^(-1)*sum(d))
}
warnings()
x
d
temp
print(c("iter",j,"complete"))
a <- 10
b <- c(1)
d <- c()
mean_iter_x <- c()
mean_iter_y <- c()
for(j in seq(1,3000)){
for(i in seq(1,6000)){
temp <- rgamma(1,shape=a+b[i],scale=1/2)
d[i] <- temp
temp <- rpois(1,temp)
b[i+1] <- temp
}
mean_iter_x <- c(mean_iter_x,(6000-3000)^(-1)*sum(b))
mean_iter_y <- c(mean_iter_y,(6000-3000)^(-1)*sum(d))
print(c("iter",j,"complete"))
}
mean_iter_x
mean(x)
mean(mean_iter_x)
d
b
sum(b)
a <- 10
b <- c(1)
d <- c()
for(i in seq(1,6000)){
temp <- rgamma(1,shape=a+b[i],scale=1/2)
d[i] <- temp
temp <- rpois(1,temp)
b[i+1] <- temp
}
mean(d)
mean(b)
mean_iter_y <- c(mean_iter_y,(6000-3000)^(-1)*sum(d[3001:6000]))
mean_iter_x <- c(mean_iter_x,(6000-3000)^(-1)*sum(b[3001:6000]))
mean_iter_y <- c(mean_iter_y,(6000-3000)^(-1)*sum(d[3001:6000]))
mean_iter_x
(6000-3000)^(-1)*sum(b[3001:6000])
(6000-3000)^(-1)*sum(d[3001:6000])
### Y에 대한 분산
var(d[3001:6000])
### (2 - 2)x에 대한 분산
var(b[3001:6000])
## 2) 3000개부터 6000개 사이의 샘플들 X,Y에 대한 평균과 분산을 추출하시오
### (1 - 1)Y에 대한 평균
mean_y <- (6000-3000)^(-1)*sum(b[3001:6000])
## 2) 3000개부터 6000개 사이의 샘플들 X,Y에 대한 평균과 분산을 추출하시오
### (1 - 1)Y에 대한 평균
mean_y <- (6000-3000)^(-1)*sum(b[3001:6000])
### (1 - 2)Y에 대한 분산
var_y <- var(d[3001:6000])
### (2 - 1)X에 대한 평균
mean_x <- (6000-3000)^(-1)*sum(d[3001:6000])
### (2 - 2)x에 대한 분산
var_y <- var(b[3001:6000])
c(mean_x,var_x,mean_y,var_y)
### (2 - 2)x에 대한 분산
var_y <- var(b[3001:6000])
c(mean_x,var_x,mean_y,var_y)
## 2) 3000개부터 6000개 사이의 샘플들 X,Y에 대한 평균과 분산을 추출하시오
### (1 - 1)Y에 대한 평균
mean_y <- (6000-3000)^(-1)*sum(b[3001:6000])
### (1 - 2)Y에 대한 분산
var_y <- var(d[3001:6000])
### (2 - 1)X에 대한 평균
mean_x <- (6000-3000)^(-1)*sum(d[3001:6000])
### (2 - 2)x에 대한 분산
var_x <- var(b[3001:6000])
c(mean_x,var_x,mean_y,var_y)
mean_y * qnorm(0.025) * (var_y^(1/2)/length(b[3001:6000])^(1/2))
mean_y
qnorm(0.025)
var_y^(1/2)
## 3) 2)에서 추출한 평균에 대한 95% 신뢰구간을 정하시오
### (1) 이들 평균들은 결론적으로 N(c,s)로 분포수렴한다. 이를 이용하여 X와 Y 각각에 대한 신뢰구간을 정하면
#### - Y에 대한 신뢰구간
lower <- mean_y - qnorm(0.025) * (var_y^(1/2)/length(b[3001:6000])^(1/2))
mean_y - qnorm(0.025) * (var_y^(1/2)/length(b[3001:6000])^(1/2))
## 3) 2)에서 추출한 평균에 대한 95% 신뢰구간을 정하시오
### (1) 이들 평균들은 결론적으로 N(c,s)로 분포수렴한다. 이를 이용하여 X와 Y 각각에 대한 신뢰구간을 정하면
#### - Y에 대한 신뢰구간
upper <- mean_y - qnorm(0.025) * (var_y^(1/2)/length(b[3001:6000])^(1/2))
lower <- mean_y + qnorm(0.025) * (var_y^(1/2)/length(b[3001:6000])^(1/2))
c(lower,upper)
upper <- mean_x - qnorm(0.025) * (var_x^(1/2)/length(d[3001:6000])^(1/2))
lower <- mean_x + qnorm(0.025) * (var_x^(1/2)/length(d[3001:6000])^(1/2))
c(lower,upper)
c(lower,upper)
/rnorm
?rnom
?rnorm
a <- 10
b <- 10
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
}
a <- 10
b <- 10
n <- 300
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
}
d <- c()
e <- c()
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
}
t_stat <- c()
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
}
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
print("iter",j,"complete")
}
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,3000)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
print(c("iter",j,"complete"))
}
### (1) (2 - 2)에서 도출한 베이지안 추정해의 공식을 알고리즘적 방식으로 구한다.
for(j in seq(0,300)){
for(i in runif(300,0,1)){
temp <- a + b * log(i/(1-i))
d <- c(d,rnorm(1,mean = temp, sd = b/n^(1/2)))
e <- c(e,temp)
}
t_stat <- c(t_stat,(sum(e*d)/length(e))/sum(d/length(d)))
print(c("iter",j,"complete"))
}
t_stat
mean(t_stat)
i
d
e
temp
length(t_stat)
