getwd()
n = m = 8
((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2)
n = m = 8
x_mean <- 75.2
y_mean <- 78.6
x_var <- 71.2
y_var <- 54.8
((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2)
(m+n-2)/((n+m-2)+t_score^2)
t_score <- ((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2)
(m+n-2)/((n+m-2)+t_score^2)
t_score <- absolute(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
abs()
t_score <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
(m+n-2)/((n+m-2)+t_score^2)
t_score
runif(10)
qnorm(runif(10))
?qnorm
x_mean <- qnorm(runif(10) mean = 100, sd = 15)/10
x_mean <- qnorm(runif(10), mean = 100, sd = 15)/10
x_mean
x_mean <- qnorm(runif(10), mean = 10, sd = 15)/10
x_mean <- qnorm(runif(10), mean = 10, sd = 15)/10
x_mean
x_mean <- qnorm(runif(10), mean = 100, sd = 15)/10
x_mean <- qnorm(runif(100), mean = 100, sd = 15)/100
y_mean <- qnorm(runif(100), mean = 80, sd = 20)/100
x_mean <- qnorm(runif(100), mean = 100, sd = 15)/100
y_mean <- qnorm(runif(100), mean = 80, sd = 20)/100
x_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
y_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
y_var
x_mean
x_mean <- qnorm(runif(100), mean = 100, sd = 15)/100
y_mean <- qnorm(runif(100), mean = 80, sd = 20)/100
x_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
y_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
x_var
(qnorm(runif(100),mean = 100, sd = 15)
)
x_mean
x_mean <- sum(qnorm(runif(100), mean = 100, sd = 15))/100
x_mean <- sum(qnorm(runif(100), mean = 100, sd = 15))/100
y_mean <- sum(qnorm(runif(100), mean = 80, sd = 20))/100
x_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
y_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
x_var
x_mean
n = m = 100
t_score <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
t_score
## 부트스트랩을 실시한다.
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_mean <- sum(qnorm(runif(100), mean = 100, sd = 15))/100
y_mean <- sum(qnorm(runif(100), mean = 80, sd = 20))/100
x_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
y_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
## 부트스트랩을 실시한다.
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_mean <- sum(qnorm(runif(100), mean = 100, sd = 15))/100
y_mean <- sum(qnorm(runif(100), mean = 80, sd = 20))/100
x_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
y_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
)
## 부트스트랩을 실시한다.
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_mean <- sum(qnorm(runif(100), mean = 100, sd = 15))/100
y_mean <- sum(qnorm(runif(100), mean = 80, sd = 20))/100
x_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
y_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot <- c()
## 부트스트랩을 실시한다.
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_mean <- sum(qnorm(runif(100), mean = 100, sd = 15))/100
y_mean <- sum(qnorm(runif(100), mean = 80, sd = 20))/100
x_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
y_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
## 부트스트랩을 실시한다.
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_mean <- sum(qnorm(runif(100), mean = 100, sd = 15))/100
y_mean <- sum(qnorm(runif(100), mean = 80, sd = 20))/100
x_var <- (sum(qnorm(runif(100),mean = 100, sd = 15) - x_mean)^2/100)
y_var <- (sum(qnorm(runif(100),mean = 80, sd = 25) - x_mean)^2/100)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
x <- qnorm(runif(100), mean = 100, sd = 15)
y <- qnorm(runif(100), mean = 100, sd = 15)
x[runif(10)]
runif(10)
round(runif(10))
?runif
unif(30,0,100)
runif(30,0,100)
round(runif(30,0,100))
x[round(runif(30,0,100))]
x[round(runif(30,0,100))]
x <- qnorm(runif(100), mean = 100, sd = 15)
y <- qnorm(runif(100), mean = 100, sd = 15)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice))/30
x_var <- (sum(x_choice - x_mean)^2/30)
y_var <- (sum(y_choice - x_mean)^2/30)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/29)
y_var <- (sum(y_choice - x_mean)^2/29)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
x
y
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/29)
y_var <- (sum(y_choice - y_mean)^2/29)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/30)
y_var <- (sum(y_choice - y_mean)^2/30)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
x_choice
x <- qnorm(runif(100), mean = 100, sd = 15)
y <- qnorm(runif(100), mean = 80, sd = 15)
theta_boot <- c()
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/30)
y_var <- (sum(y_choice - y_mean)^2/30)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
(((n*m)/(n+m))^(1/2))
(((n*m)/(n+m))^(1/2))
10000/200
(10000/200)^(1/2)
x_mean-y_mean
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/30)
y_var <- (sum(y_choice - y_mean)^2/30)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var-y_var)/(n+m-2))^(1/2))
}
theta_boot
x <- qnorm(runif(100), mean = 100, sd = 15)
y <- qnorm(runif(100), mean = 80, sd = 15)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/30)
y_var <- (sum(y_choice - y_mean)^2/30)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- sum(x_choice - x_mean)^2
y_var <- sum(y_choice - y_mean)^2
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(30), mean = 100, sd = 15)
y_choice <- qnorm(runif(30), mean = 80, sd = 15)
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- sum(x_choice - x_mean)^2
y_var <- sum(y_choice - y_mean)^2
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
x_choice
x_choice - x_mean
(x_choice - x_mean)^2
sum((x_choice - x_mean)^2)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(30), mean = 100, sd = 15)
y_choice <- qnorm(runif(30), mean = 80, sd = 15)
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
n = m = 30
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(30), mean = 100, sd = 15)
y_choice <- qnorm(runif(30), mean = 80, sd = 15)
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
n = m = 100
y <- qnorm(runif(100), mean = 80, sd = 15)
x <- qnorm(runif(100), mean = 100, sd = 15)
theta_boot <- c()
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(100), mean = 100, sd = 15)
y_choice <- qnorm(runif(100), mean = 80, sd = 15)
x_mean <- sum(x_choice)/100
y_mean <- sum(y_choice)/100
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
hist(theta_boot)
abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(100), mean = 100, sd = 15)
y_choice <- qnorm(runif(100), mean = 100, sd = 15)
x_mean <- sum(x_choice)/100
y_mean <- sum(y_choice)/100
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(100), mean = 100, sd = 15)
y_choice <- qnorm(runif(100), mean = 100, sd = 15)
x_mean <- sum(x_choice)/100
y_mean <- sum(y_choice)/100
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
hist(theta_boot)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(100), mean = 100, sd = 15)
y_choice <- qnorm(runif(100), mean = 100, sd = 15)
x_mean <- sum(x_choice)/100
y_mean <- sum(y_choice)/100
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- ((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2)
}
hist(theta_boot)
?shapiro.test
((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2)
15^2
?ks.test
ks.test(theta_boot,qnorm(runif(3000),mean=0,sd = 1))
theta_boot
ks.test(theta_boot,qnorm(runif(3000),mean = 0,sd = 1))
ks.test(theta_boot,qnorm(runif(3000),mean = 0,sd = 1))
ks.test(theta_boot,qnorm(runif(3000),mean = 0,sd = 1))
n = m = 100
exp_mean_x <- 100
exp_mean_y <- 100
exp_sd <- 15
n = m = 100
exp_mean_x <- 100
exp_mean_y <- 100
exp_sd <- 15
theta_boot <- c()
for(i in 0:3000){
## 균등분포로부터 100개의 확률값을 임의로 선출하고, 각각 x와 y의 확률표본을 선출한다.
x_choice <- qnorm(runif(n), mean = exp_mean_x, sd = exp_sd)
y_choice <- qnorm(runif(m), mean = exp_mean_y, sd = exp_sd)
## E(x)와 E(X^2)를 각각 정의한다.
x_mean <- sum(x_choice)/n
y_mean <- sum(y_choice)/m
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## t통계량으로 부트스트랩을 실시한다.
theta_boot[i] <- ((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2)
}
hist(theta_boot)
## 비모수 검정법은 KS검정의 결과도, 분포가 동일하다는 귀무가설을 기각하지 못하기 때문에 동일한 분포임을 확인할 수 있다.
ks.test(theta_boot,qnorm(runif(3000),mean = 0,sd = 1))
