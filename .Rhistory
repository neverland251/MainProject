x_200 <- x/200
plot(dbinom(x_10,10,0.05))
plot(dbinom(x_20,20,0.05))
plot(dbinom(x_50,50,0.05))
plot(dbinom(x_200,200,0.05))
x_10 <- seq(0,10)/10
x_20 <- seq(0,20)/20
x_50 <- seq(0,50)/50
x_200 <- seq(0,200)/200
plot(dbinom(x_10,10,0.05))
x_10 <- seq(0,10)/10
x_20 <- seq(0,20)/20
x_50 <- seq(0,50)/50
x_200 <- seq(0,200)/200
plot(dbinom(x_10,10,0.05))
x_10
x_20
x_50
plot(dbinom(x_10,10,0.05))
plot(dbinom(x_20,20,0.05))
plot(dbinom(x_50,50,0.05))
plot(dbinom(x_200,200,0.05))
x_10
x_200
plot(x_10,dbinom(x_10,10,0.05))
dbinom(x_10,10,0.05)
x_10 <- seq(0,10)
x_20 <- seq(0,20)
x_50 <- seq(0,50)
x_200 <- seq(0,200)
plot(dbinom(x_10,10,0.05))
plot(dbinom(x_20,20,0.05))
plot(dbinom(x_50,50,0.05))
plot(dbinom(x_200,200,0.05))
plot((dbinom(x_10,10,0.05))/10)
plot(dbinom(x_20,20,0.05)/20)
plot(dbinom(x_50,50,0.05)/50)
plot(dbinom(x_200,200,0.05)/200)
x_2000 <- seq(0,2000)
plot(dbinom(x_2000,2000,0.05)/2000)
x
ppois(x,f2)
ppois(x,2)
plot(ppois(x,2))
seq <- (0,10,by=0.1)
rm(seq)
x <- seq(0,10,by=0.1)
plot(ppois(x,2))
x
plot(dpois(x,2))
plot(dpois(x,2))
x <- seq(0,10,by=0.1)
plot(dpois(x,2))
x
x <- seq(0,15)
plot(dpois(x,2))
plot(ppois(x,2))
plot(pbinom(x,100,0.02))
plot(ppois(x,2),pbinom(x,100,0.02))
-log(1+1) + log(0.01)
-log(2+1) + log(0.01)
-log(200+1) + log(0.01)
-log(0.01+1) + log(0.01)
-log(0.00001+1) + log(0.01)
-log(0.0000000000000000001+1) + log(0.01)
-log(1+1) + log(0.01)
-log(10000000+1) + log(0.01)
-log(0.0000000000000000000000000000000001+1) + log(0.01)
-log(0.0000000000000000000000000000000000000000000000000000000000000000001+1) + log(0.01)
for(i in seq(0,10)){
m <- m - (m+1)(log(m+1)-log(0.01))
print(m)
}
for(m in seq(0,10)){
m <- m - (m+1)(log(m+1)-log(0.01))
print(m)
}
m <- 1
for(i in seq(0,10)){
m <- m - (m+1)(log(m+1)-log(0.01))
print(m)
}
m <- 1
for(i in seq(0,10)){
m <- m - (m+1)*(log(m+1)-log(0.01))
print(m)
}
m <- 2
for(i in seq(0,10)){
m <- m - (m+1)*(log(m+1)-log(0.01))
print(m)
}
m <- -1
for(i in seq(0,10)){
m <- m - (m+1)*(log(m+1)-log(0.01))
print(m)
}
m <- -5
for(i in seq(0,10)){
m <- m - (m+1)*(log(m+1)-log(0.01))
print(m)
}
m <- 0
for(i in seq(0,10)){
m <- m - (m+1)*(log(m+1)-log(0.01))
print(m)
}
m <- 0.00000001
for(i in seq(0,10)){
m <- m - (m+1)*(log(m+1)-log(0.01))
print(m)
}
m <- 1000
for(i in seq(0,10)){
m <- m - (m+1)*(log(m+1)-log(0.01))
print(m)
}
m <- 0.00001
for(i in seq(0,10)){
m <- m - (m+1)*(log(m+1)-log(0.01))
print(m)
}
m <- 0.000000000000000000000000000000000000000001
for(i in seq(0,10)){
m <- m - (m+1)*(log(m+1)-log(0.01))
print(m)
}
m <- -5
for(i in seq(0,10)){
m <- m - (m+1)*(log(m+1)-log(0.01))
print(m)
}
for(i in seq(0,10)){
m <- m - (log(m+1)-log(0.01))
print(m)
}
m <- -5
m <- 5
for(i in seq(0,10)){
m <- m - (log(m+1)-log(0.01))
print(m)
}
log(0.01)
m <- 3
for(i in seq(0,10)){
m <- m - (log(m+1)-log(0.01))
print(m)
}
m <- 2
for(i in seq(0,10)){
m <- m - (log(m+1)-log(0.01))
print(m)
}
m <- 4
for(i in seq(0,10)){
m <- m - (log(m+1)-log(0.01))
print(m)
}
m <- 4
for(i in seq(0,10)){
m <- m - ((1+m)*e^(-m))/(e^(-m) - (1+m)e^(-m))
print(m)
}
m <- 4
for(i in seq(0,10)){
m <- m - ((1+m)*e^(-m))/(e^(-m) - (1+m)e^(-m))
print(m)
}
m <- 4
for(i in seq(0,10)){
m <- m - ((1+m)*e^(-m))/(e^(-m) - (1+m)*e^(-m))
print(m)
}
m <- 4
for(i in seq(0,10)){
m <- m - ((1+m)*e^(-m))/(e^(-m) - (1+m)*e^(-m))
print(m)
}
m <- 20
for(i in seq(0,10)){
m <- m - ((1+m)*e^(-m))/(e^(-m) - (1+m)*e^(-m))
print(m)
}
m
m <- 20
m
m <- 20
e
m <- 20
for(i in seq(0,10)){
m <- m - ((1+m)*exp(-m))/(exp(-m) - (1+m)*exp(-m))
print(m)
}
m <- 20
for(i in seq(0,100)){
m <- m - ((1+m)*exp(-m))/(exp(-m) - (1+m)*exp(-m))
print(m)
}
m <- 10
for(i in seq(0,100)){
m <- m - ((1+m)*exp(-m))/(exp(-m) - (1+m)*exp(-m))
print(m)
}
m <- 5
for(i in seq(0,100)){
m <- m - ((1+m)*exp(-m))/(exp(-m) - (1+m)*exp(-m))
print(m)
}
m <- 1
for(i in seq(0,100)){
m <- m - ((1+m)*exp(-m))/(exp(-m) - (1+m)*exp(-m))
print(m)
}
m <- 20
for(i in seq(0,100)){
m <- m - ((1+m)*exp(-m))/(exp(-m) - (1+m)*exp(-m))
print(m)
}
m <- 20
for(i in seq(0,1000)){
m <- m - ((1+m)*exp(-m))/(exp(-m) - (1+m)*exp(-m))
print(m)
}
m <- 1
for(i in seq(0,1000)){
m <- m - ((1+m)*exp(-m))/(exp(-m) - (1+m)*exp(-m))
print(m)
}
m <- seq(0,20)
log(m+1) - log(0.01)
m >= log(m+1) - log(0.01)
0.99*3
m <- seq(0,20)
m >= 3*log(m) - log(2.97)
m
3*log(m) - log(2.97)
m <- seq(0,50,70)
m >= 3*log(m) - log(2.97)
m <- seq(50,70)
m >= 3*log(m) - log(2.97)
3*log(m) - log(2.97)
m <- seq(50,100)
m >= 3*log(m) - log(2.97)
m ,= 3*log(m) - log(2.97)
m <= 3*log(m) - log(2.97)
m <- seq(0,100)
m <= 3*log(m) - log(2.97)
m <= 3*log(m) - log(0.99*factorial(3))
m <- seq(0,100)
m <= m*log(3) - log(0.99 + factorial(m))
m <- seq(0,300)
m <= m*log(3) - log(0.99 + factorial(m))
m*log(3) - log(0.99 + factorial(m))3
m*log(3) - log(0.99 + factorial(m))
m <- seq(0,300)
m <= m*log(3) - log(0.99*factorial(m))
m*log(3) - log(0.99*factorial(m)
)
?dgamma
pgamma(5.23,rate = 6,scale = 2)
pgamma(5.23,shape = 6,scale = 2)
pgamma(12.6,shape = 3, scale = 4)
pgamma(12.6,shape = 3, scale = 4) - pgamma(1.64,shape = 3, scale = 4)
pgamma(25.2,shape = 3, scale = 4) - pgamma(3.28,shape = 3, scale = 4)
pgamma(12.6,shape = 3, scale = 4) - pgamma(1.64,shape = 3, scale = 4)
2 * pgamma(12.6,shape = 3, scale = 4) - 2 * pgamma(1.64,shape = 3, scale = 4)
2 * pgamma(12.6,shape = 3, scale = 4)
pgamma(12.6,shape = 3, scale = 4)
pgamma(1.64,shape = 3, scale = 4)
rnorm(100)
runif(100)
mean(runif(100)^2)
mean(runif(100)^2)
runif(100)^2
x <- runif(100)^2
mean(x)
x <- runif(100)^2
mean(x)
x <- runif(100)^2
mean(x)
x <- runif(100)^2
mean(x)
x <- runif(100)^2
mean(x)
for(i in seq(0,100)){
x <- runif(100)^2
if(0.333 < mean(x) < 0.334){
print("success")
asdf
}
}
x
mean(x)
for(i in seq(0,100)){
x <- runif(100)^2
if(0.333 < mean(x) < 0.334){
print("success")
asdf
}
}
x
for(i in seq(0,100)){
x <- runif(100)^2
print(i)
if(0.333 < mean(x) < 0.334){
print("success")
asdf
}
}
mean(x)
for(i in seq(0,100)){
x <- runif(100)^2
print(i)
if(0.333 < mean(x) < 0.334){
print("success")
asdf
}
}
for(i in seq(0,100)){
x <- runif(100)^2
print(i)
if(0.333 < mean(x) < 0.334){
print("success")
stop
}
}
mean(x)
for(i in seq(0,100)){
x <- runif(100)^2
print(i)
if(0.333 < mean(x)&mean(x) < 0.334){
print("success")
stop
}
}
mean(x)
for(i in seq(0,100)){
x <- runif(100)^2
print(i)
if(0.333 < mean(x)&mean(x) < 0.334){
print("success")
stop
}
}
for(i in seq(0,100)){
x <- runif(100)^2
print(i)
if(0.333 < mean(x)&mean(x) < 0.334){
print("success")
stop()
}
}
mean(x)
x
x < mean(x)
count(x < mean(x))
str(x < mean(x))
(x < mean(x)) == TRUE
x[(x < mean(x)) == TRUE]
length(x[(x < mean(x)) == TRUE])
length(x[(x < mean(x)) == FALSE])
for(i in seq(0,100)){
x <- runif(100)^2
print(i)
if(0.333 < mean(x)&mean(x) < 0.334){
print("success")
stop()
}
}
length(x[(x < mean(x)) == TRUE])
for(i in seq(0,100)){
x <- runif(100)^2
print(i)
if(0.333 < mean(x)&mean(x) < 0.334){
print("success")
stop()
}
}
for(i in seq(0,100)){
x <- runif(100)^2
print(i)
if(0.333 < mean(x)&mean(x) < 0.334){
print("success")
stop()
}
}
length(x[(x < mean(x)) == TRUE])
for(i in seq(0,100)){
x <- runif(100)^2
print(i)
if(0.333 < mean(x)&mean(x) < 0.334){
print("success")
stop()
}
}
length(x[(x < mean(x)) == TRUE])
for(i in seq(0,100)){
x <- runif(100)^2
print(i)
if(0.333 < mean(x)&mean(x) < 0.334){
print("success")
stop()
}
}
length(x[(x < mean(x)) == TRUE])
pnorm(60,75,10)
rnorm(1,0,0)
drnom(100,1,0)
dnorm(100,1,0)
dnorm(1,1,0)
dnorm(2,1,0)
dnorm(0,1,0)
x
qnorm(x,1,0)
data.frame(c(283,215,277,208),c(215,213,217,153),c(277,217,336,236),c(208,153,236,194))
amet <- data.frame(c(283,215,277,208),c(215,213,217,153),c(277,217,336,236),c(208,153,236,194))
decom <- eigen(amet)
### 1) 이 공분산 행렬을 고유 분해하고, 제1 주성분이 전체 변동의 90%를 설명함을 보여라
decom <- eigen(amet)
#### 2) 총변동은 다음과 같다.
sum(decom$values)
#### 이 값은 사실 공분산 행렬의 대각성분의 합과 같다.
rm(tr)
#### 이 값은 사실 공분산 행렬의 대각성분의 합과 같다.
trace(amet)
#### 이 값은 사실 공분산 행렬의 대각성분의 합과 같다.
tr(amet)
#### 이 값은 사실 공분산 행렬의 대각성분의 합과 같다.
sum(diag(amet))
diag(amet)
amet
diag(amet[[1]])
#### 이 값은 사실 공분산 행렬의 대각성분의 합과 같다.
sum(diag(amet[[1]]))
### 1) 이 공분산 행렬을 고유 분해하고, 제1 주성분이 전체 변동의 90%를 설명함을 보여라
decom <- eigen(amet)
#### 2) 총변동은 다음과 같다.
sum(decom$values)
#### 이 값은 사실 공분산 행렬의 대각성분의 합과 같다.
sum(diag(amet[[1]]))
decom$values[1]/sum(decom$values)
## 2) 주성분벡터 Y를 구하라
decom$vectors
decom$vectors[1]
decom$vectors[,1]
var(decom$vectors[,1])
pnorm(3*pnorm(0.05))
pnorm(3*pnorm(0.05))^2
(3*pnorm(3*pnorm(0.05)))^2
(3*pnorm(3*pnorm(0.1)))^2
(3*pnorm(3*pnorm(0.05)))^2
(3*pnorm(0.05)))^2
(3*pnorm(0.05))^2
(3*qnorm(0.05))^2
4.7-qnorm(0.05)*(5.76/17)^(1/2)
4.7+qnorm(0.05)*(5.76/17)^(1/2)
qnorm(0.023)
(2*qnorm(0.023))^2*10
(75/300)-qnorm(0.05)*(((75/300)*(1-75/300))/300)^(1/2)
### 3. Y가 b(300,p)를 따른다고 하자. Y의 관찰값이 y=75일 때, p에 대한 90% 근사 신뢰구간을 구하시오
p <- 75/300
p - qnorm(0.05)*(p*(1-p)/300)^(1/2)
c(p - qnorm(0.05)*(p*(1-p)/300)^(1/2),p + qnorm(0.05)*(p*(1-p)/300)^(1/2))
drnom(2)
dnorm(2)
dnorm(2) - drnom(-2)
dnorm(2) - dnorm(-2)
dnorm(2) - (1-dnorm(2))
pnorm(2) - (1-pnorm(2))
pnorm(2) - pnorm(-2)
pnorm(2)
(4*qnorm(0.025))^2
(qnorm(0.05)/0.04)^2
3.4-qnorm(0.05)*(3.4/200)^(1/2)
3.4+qnorm(0.05)*(3.4/200)^(1/2)
### 4. 모수 mu와 sig가 알려지지 않은 정규분포(mu,sig)에서 추출한 확률표본을 X1...Xn이라고 하자.
#### 1) sig^2에 대한 90% 신뢰구간을 구하시오
##### (1) (n-1)s^2/sig^2은 chisq(r-1)을 따른다고 알려져 있다. 이를 이용하면
a <- qchisq(0.05)
### 4. 모수 mu와 sig가 알려지지 않은 정규분포(mu,sig)에서 추출한 확률표본을 X1...Xn이라고 하자.
#### 1) sig^2에 대한 90% 신뢰구간을 구하시오.(단, n = 9, s^2 = 7.93이다.)
##### (1) (n-1)s^2/sig^2은 chisq(r-1)을 따른다고 알려져 있다. 이를 이용하면
n <- 09
### 4. 모수 mu와 sig가 알려지지 않은 정규분포(mu,sig)에서 추출한 확률표본을 X1...Xn이라고 하자.
#### 1) sig^2에 대한 90% 신뢰구간을 구하시오.(단, n = 9, s^2 = 7.93이다.)
##### (1) (n-1)s^2/sig^2은 chisq(r-1)을 따른다고 알려져 있다. 이를 이용하면
n <- 9
a <- qchisq(0.05,n-1)
b <- qchisq(0.95,n-1)
c(a,b)
s_2 <- 7.93
c((n-1)*s_2)/b,(n-1)*s_2)/a)
c(((n-1)*s_2)/b,((n-1)*s_2)/a)
(6/10)+qnorm(0.05)*((6/10)*(1-(6/10))/100)^(1/2)
(6/10)-qnorm(0.05)*((6/10)*(1-(6/10))/100)^(1/2)
((9*8.64)+(9*7.88))/18
(5.6-4.8)-qnorm(0.5)*(8.64)^(1/2)*(2/10)^(1/2)
(5.6-4.8)+qnorm(0.5)*(8.64)^(1/2)*(2/10)^(1/2)
(5.6-4.8)+qnorm(0.025)*(8.64)^(1/2)*(2/10)^(1/2)
(5.6-4.8)-qnorm(0.025)*(8.64)^(1/2)*(2/10)^(1/2)
n1 <- 100
n1 <- 100
n2 <- 100
y1 <- 50
y2 <- 40
((y1/n1) - (y2/n2)) + qnorm(0.05))*(((y1/n1)/n1)+((y2/n2)/n2))^(1/2)
((y1/n1) - (y2/n2)) + qnorm(0.05)*(((y1/n1)/n1)+((y2/n2)/n2))^(1/2)
upper <- ((y1/n1) - (y2/n2)) - qnorm(0.05)*(((y1/n1)/n1)+((y2/n2)/n2))^(1/2)
c(lower,upper)
upper <- ((y1/n1) - (y2/n2)) + qnorm(0.05)*(((y1/n1)/n1)+((y2/n2)/n2))^(1/2)
lower <- ((y1/n1) - (y2/n2)) - qnorm(0.05)*(((y1/n1)/n1)+((y2/n2)/n2))^(1/2)
c(lower,upper)
