theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
x <- qnorm(runif(100), mean = 100, sd = 15)
y <- qnorm(runif(100), mean = 100, sd = 15)
x[runif(10)]
runif(10)
round(runif(10))
?runif
unif(30,0,100)
runif(30,0,100)
round(runif(30,0,100))
x[round(runif(30,0,100))]
x[round(runif(30,0,100))]
x <- qnorm(runif(100), mean = 100, sd = 15)
y <- qnorm(runif(100), mean = 100, sd = 15)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice))/30
x_var <- (sum(x_choice - x_mean)^2/30)
y_var <- (sum(y_choice - x_mean)^2/30)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/29)
y_var <- (sum(y_choice - x_mean)^2/29)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
x
y
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/29)
y_var <- (sum(y_choice - y_mean)^2/29)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/30)
y_var <- (sum(y_choice - y_mean)^2/30)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
x_choice
x <- qnorm(runif(100), mean = 100, sd = 15)
y <- qnorm(runif(100), mean = 80, sd = 15)
theta_boot <- c()
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/30)
y_var <- (sum(y_choice - y_mean)^2/30)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
(((n*m)/(n+m))^(1/2))
(((n*m)/(n+m))^(1/2))
10000/200
(10000/200)^(1/2)
x_mean-y_mean
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/30)
y_var <- (sum(y_choice - y_mean)^2/30)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var-y_var)/(n+m-2))^(1/2))
}
theta_boot
x <- qnorm(runif(100), mean = 100, sd = 15)
y <- qnorm(runif(100), mean = 80, sd = 15)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- (sum(x_choice - x_mean)^2/30)
y_var <- (sum(y_choice - y_mean)^2/30)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- x[round(runif(30,0,100))]
y_choice <- y[round(runif(30,0,100))]
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- sum(x_choice - x_mean)^2
y_var <- sum(y_choice - y_mean)^2
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(30), mean = 100, sd = 15)
y_choice <- qnorm(runif(30), mean = 80, sd = 15)
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- sum(x_choice - x_mean)^2
y_var <- sum(y_choice - y_mean)^2
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
x_choice
x_choice - x_mean
(x_choice - x_mean)^2
sum((x_choice - x_mean)^2)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(30), mean = 100, sd = 15)
y_choice <- qnorm(runif(30), mean = 80, sd = 15)
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
n = m = 30
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(30), mean = 100, sd = 15)
y_choice <- qnorm(runif(30), mean = 80, sd = 15)
x_mean <- sum(x_choice)/30
y_mean <- sum(y_choice)/30
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
n = m = 100
y <- qnorm(runif(100), mean = 80, sd = 15)
x <- qnorm(runif(100), mean = 100, sd = 15)
theta_boot <- c()
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(100), mean = 100, sd = 15)
y_choice <- qnorm(runif(100), mean = 80, sd = 15)
x_mean <- sum(x_choice)/100
y_mean <- sum(y_choice)/100
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
hist(theta_boot)
abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(100), mean = 100, sd = 15)
y_choice <- qnorm(runif(100), mean = 100, sd = 15)
x_mean <- sum(x_choice)/100
y_mean <- sum(y_choice)/100
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
theta_boot
hist(theta_boot)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(100), mean = 100, sd = 15)
y_choice <- qnorm(runif(100), mean = 100, sd = 15)
x_mean <- sum(x_choice)/100
y_mean <- sum(y_choice)/100
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- abs(((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2))
}
hist(theta_boot)
for(i in 0:3000){
## 균등분포로부터 100개의 값을 추출하여, 소수점을 절사하고 numb에 담는다.
x_choice <- qnorm(runif(100), mean = 100, sd = 15)
y_choice <- qnorm(runif(100), mean = 100, sd = 15)
x_mean <- sum(x_choice)/100
y_mean <- sum(y_choice)/100
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## 샘플변수를 담는다.
## 해당 값을 일단 저장해준다.
theta_boot[i] <- ((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2)
}
hist(theta_boot)
?shapiro.test
((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2)
15^2
?ks.test
ks.test(theta_boot,qnorm(runif(3000),mean=0,sd = 1))
theta_boot
ks.test(theta_boot,qnorm(runif(3000),mean = 0,sd = 1))
ks.test(theta_boot,qnorm(runif(3000),mean = 0,sd = 1))
ks.test(theta_boot,qnorm(runif(3000),mean = 0,sd = 1))
n = m = 100
exp_mean_x <- 100
exp_mean_y <- 100
exp_sd <- 15
n = m = 100
exp_mean_x <- 100
exp_mean_y <- 100
exp_sd <- 15
theta_boot <- c()
for(i in 0:3000){
## 균등분포로부터 100개의 확률값을 임의로 선출하고, 각각 x와 y의 확률표본을 선출한다.
x_choice <- qnorm(runif(n), mean = exp_mean_x, sd = exp_sd)
y_choice <- qnorm(runif(m), mean = exp_mean_y, sd = exp_sd)
## E(x)와 E(X^2)를 각각 정의한다.
x_mean <- sum(x_choice)/n
y_mean <- sum(y_choice)/m
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## t통계량으로 부트스트랩을 실시한다.
theta_boot[i] <- ((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2)
}
hist(theta_boot)
## 비모수 검정법은 KS검정의 결과도, 분포가 동일하다는 귀무가설을 기각하지 못하기 때문에 동일한 분포임을 확인할 수 있다.
ks.test(theta_boot,qnorm(runif(3000),mean = 0,sd = 1))
n = m = 100
exp_mean_x <- 100
exp_mean_y <- 100
exp_sd <- 15
theta_boot <- c()
for(i in 0:3000){
## 균등분포로부터 100개의 확률값을 임의로 선출하고, 각각 x와 y의 확률표본을 선출한다.
x_choice <- qnorm(runif(n), mean = exp_mean_x, sd = exp_sd)
y_choice <- qnorm(runif(m), mean = exp_mean_y, sd = exp_sd)
## E(x)와 E(X^2)를 각각 정의한다.
x_mean <- sum(x_choice)/n
y_mean <- sum(y_choice)/m
x_var <- sum((x_choice - x_mean)^2)
y_var <- sum((y_choice - y_mean)^2)
## t통계량으로 부트스트랩을 실시한다.
theta_boot[i] <- ((((n*m)/(n+m))^(1/2))*(x_mean-y_mean))/((x_var+y_var)/(n+m-2))^(1/2)
}
hist(theta_boot)
## 비모수 검정법은 KS검정의 결과도, 분포가 동일하다는 귀무가설을 기각하지 못하기 때문에 동일한 분포임을 확인할 수 있다.
ks.test(theta_boot,qnorm(runif(3000),mean = 0,sd = 1))
?pnorm
qnorm(0,05)
qnorm(0.05)
pnorm(-1.644854,mean=-1,sd = 1)
dnorm(-1.644854,mean=-1,sd = 1)
pnorm(1.644854,mean=-1,sd = 1)
qnorm(0.95)
qnorm(0.95,mean = 75,sd = 10)
a <- qnorm(0.95,mean = 75,sd = 10)
pnorm(a,mean=78,sd = 10)
qnorm(0.95,mean = 75,sd = 10)
dnorm(),mean = 75,sd = 10)
dnorm(A,mean = 75,sd = 10)
dnorm(a,mean = 75,sd = 10)
pnorm(a,mean = 75,sd = 10)
pnorm(a,mean = 78,sd = 10)
qnorm(0.90,mean = 78,sd = 10)
b <- qnorm(0.90,mean = 78,sd = 10)
pnorm(b,mean=75,sd=10)
a<- pnorm(b,mean=75,sd=10)
prnom(a,mean=75,sd=10)
pnorm(a,mean=75,sd=10)
pnorm(0.05,0,5)
pnorm(0.95,0,5)
qnorm(0.58,1,5)
pnorm(0.58,1,5)
1-pnorm(0.58,0,5)
1-pnorm(0.58,1,5)
g <- 3*(1-pnorm(c - 75) - pnorm(c - 78)
g <- 3*(1-pnorm(c - 75)) - pnorm(c - 78)
g <- 3*(1-pnorm(c - 75)) - pnorm(c - 78)
a <- function(c){
g <- 3*(1-pnorm(c - 75)) - pnorm(c - 78)
g_d <- 3*(drnom(c-75)) - drnom(c-78)
c <- c*(g/g_d)
}
a <- function(c){
for(i in rep(0:1000)){
g <- 3*(1-pnorm(c - 75)) - pnorm(c - 78)
g_d <- 3*(drnom(c-75)) - drnom(c-78)
c <- c*(g/g_d)
}
}
a <- function(c){
for(i in rep(0:1000)){
g <- 3*(1-pnorm(c - 75)) - pnorm(c - 78)
g_d <- 3*(drnom(c-75)) - drnom(c-78)
c <- c*(g/g_d)
print(c)
}
}
a(75)
g_d <- 3*(dnorm(c-75)) - drnom(c-78)
a <- function(c){
for(i in rep(0:1000)){
g <- 3*(1-pnorm(c - 75)) - pnorm(c - 78)
g_d <- 3*(dnorm(c-75)) - dnorm(c-78)
c <- c*(g/g_d)
print(c)
}
}
a(75)
a <- function(c){
for(i in rep(0:1000)){
g <- pnorm(c - 78) - 3*(1-pnorm(c - 75))
g_d <- dnorm(c-78) + 3*(dnorm(c-75))
c <- c*(g/g_d)
print(c)
}
}
a(72)
a <- function(c){
for(i in rep(0:1000)){
g <- pnorm(c - 78) - 3*(1-pnorm(c - 75))
g_d <- dnorm(c-78) + 3*(dnorm(c-75))
c <- c - (g/g_d)
print(c)
}
}
a(72)
a(76)
a(74)
a(73)
a(77)
a(78)
a(79)
pnorm(76.78318,78,10)
#1. X1,X2,X3,X4,X5가 중앙값 c인 코시분포에서 추출한 확률표본이다. 즉
# (1/pi)*(1/(1+(x-c)^2))가 공통 pdf인 iid이다.
# 확률표본의 값이 다음과 같다.
x <- c(-1.94,0.59,-5.98,-0.08,-0.77)
## 뉴턴법
## 코시분포의 pdf에 뉴턴법을 적용하기 위해 1계 미분을 실시하면
f_prime <- function(x,ceta){
2*sum((x-ceta)/(1+(x-ceta)^2))
}
f <- function(x,ceta){
length(x)*log(pi)+sum(log(1+(x-c)^2))
}
#초깃값으로 뉴턴법 함수를 1계 미분한 후 <0이 되도록 초깃값 ceta를 정해주는 방법도 있으나, 간단하게 x의 중앙값을 초깃값으로 사용해준다.
ceta <- median(x)
for(i in 0:10000){
ceta <- ceta - f(x,ceta)/f_prime(x,ceta)
print(ceta)
}
# 2. 뉴턴법을 활용하여 스테이너의 꼭지점을 도출하시오
## 스테이너의 꼭지점 함수 f = d1+d2+d3를 사용하시오
## 단, X1 =
## (단, dn = (x^2+y^2)^(1/2)인 L2norm)
steiner <- function(x,y){
for(i in rep(0:3000)){
f <- ((3-x)^2+y^2)^(1/2)+((x^2+y^2)^(1/2))+3
dfx <- (x/(x^2+y^2))-((3-x)/((3-x)^2+y^2))
dfy <- (y/((3-x)^2+y^2)) + (y/(x^2+y^2))
x <- x - f/dfx
y <- y - f/dfy
if(i%%100 == 0){
print(c(x,y))
}
else{
}
}
}
steiner(4,0)
steiner(1,1)
steiner(2,1)
steiner(1,2)
steiner(0,2)
steiner <- function(x,y){
for(i in rep(0:3000)){
f <- ((3-x)^2+y^2)+(x^2+y^2)+9
dfx <- 4*x - 6
dfy <- 4*y
x <- x - f/dfx
y <- y - f/dfy
if(i%%100 == 0){
print(c(x,y))
}
else{
}
}
}
steiner(1,1)
steiner(2,1)
steiner(0,01,0,01)
steiner(0.01,0.01)
steiner <- function(x,y){
for(i in rep(0:3000)){
dfx <- 4*x - 6
dfxx <- 4
dfy <- 4*y
dfyy <- 4
x <- x - dfx/dfxx
y <- y - dfy/dfyy
if(i%%100 == 0){
print(c(x,y))
}
else{
}
}
}
steiner(0.01,0.01)
steiner(1,1)
steiner(2,1)
steiner(100,1)
for(i in rep(0:3000)){
dfx <- 4*x - 6
dfxx <- 4
dfy <- 4*y
dfyy <- 4
x <- x - dfx/dfxx
y <- y - dfy/dfyy
print(c(x,y))
}
steiner <- function(x,y){
for(i in rep(0:3000)){
dfx <- 4*x - 6
dfxx <- 4
dfy <- 4*y
dfyy <- 4
x <- x - dfx/dfxx
y <- y - dfy/dfyy
print(c(x,y))
}
}
steiner(2,1)
for(i in rep(0:100)){
dfx <- 4*x - 6
dfxx <- 4
dfy <- 4*y
dfyy <- 4
x <- x - dfx/dfxx
y <- y - dfy/dfyy
print(c(x,y))
}
steiner <- function(x,y){
for(i in rep(0:100)){
dfx <- 4*x - 6
dfxx <- 4
dfy <- 4*y
dfyy <- 4
x <- x - dfx/dfxx
y <- y - dfy/dfyy
print(c(x,y))
}
}
steiner <- function(x,y){
for(i in rep(0:10)){
dfx <- 4*x - 6
dfxx <- 4
dfy <- 4*y
dfyy <- 4
x <- x - dfx/dfxx
y <- y - dfy/dfyy
print(c(x,y))
}
}
steiner(2,1)
